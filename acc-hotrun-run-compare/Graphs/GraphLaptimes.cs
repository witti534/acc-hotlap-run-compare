using acc_hotrun_run_compare.DBClasses;
using ScottPlot.WinForms;
using ScottPlot;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace acc_hotrun_run_compare.Graphs
{
    public partial class GraphLaptimes : Form
    {
        readonly StoredRunContext storedRunContext = StoredRunContext.GetInstance();
        readonly FormsPlot lapTimesPlot = new() { Dock = DockStyle.Fill };


        public GraphLaptimes(List<RunInformation> providedRuns)
        {
            //VS autogenerated code
            InitializeComponent();

            Controls.Add(lapTimesPlot);


            PixelPadding padding = new(60, 15, 30, 15);
            lapTimesPlot.Plot.Layout.Fixed(padding);
            //Properly fill out the frame with space for axes

            ScottPlot.TickGenerators.NumericFixedInterval xTicks = new()
            {
                Interval = 1
            };
            lapTimesPlot.Plot.Axes.Bottom.TickGenerator = xTicks;
            //We want the x-axis ticks at only full laps

            //Variables for limiting the axis
            int mostLapsRun = 0;
            decimal slowestLapTime = 0m;
            decimal fastestLapTime = 10000m; //larger than any possible lap time in this game mode, so guaranteed that laps will be faster

            foreach (RunInformation providedRun in providedRuns)
            {
                //Once for each run
                int[] lapTimesInMs = providedRun.GetLaptimes(); //Y values in the graph
                decimal[] lapTimesInSeconds = new decimal[lapTimesInMs.Length];
                int[] lapnumbers = new int[lapTimesInMs.Length];

                if (lapnumbers.Length > mostLapsRun)
                {
                    //Getting the biggest lap number
                    mostLapsRun = lapnumbers.Length;
                }

                for (int i = 0; i < lapTimesInMs.Length; i++)
                {
                    lapTimesInSeconds[i] = lapTimesInMs[i] / 1000m; //Use seconds instead of miliseconds

                    if (lapTimesInSeconds[i] > slowestLapTime)
                    {
                        //Getting the slowest lap time of all laps
                        slowestLapTime = lapTimesInSeconds[i];
                    }
                    if (lapTimesInSeconds[i] < fastestLapTime)
                    {
                        //Getting the fastest lap time of all laps
                        fastestLapTime = lapTimesInSeconds[i];
                    }

                    lapnumbers[i] = i + 1; //X values in the graph
                }

                lapTimesPlot.Plot.Add.Scatter(lapnumbers, lapTimesInSeconds);
            } //end foreach single run

            lapTimesPlot.Plot.Axes.SetLimits(0.5, mostLapsRun + 0.5, (double)fastestLapTime * 0.995, (double)slowestLapTime * 1.005);
        }
    }
}
