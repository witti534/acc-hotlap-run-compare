using acc_hotrun_run_compare.DBClasses;
using ScottPlot;
using ScottPlot.Plottables;
using ScottPlot.WinForms;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Automation;
using System.Windows.Forms;

namespace acc_hotrun_run_compare.Graphs
{
    /// <summary>
    /// This class contains the form for the graph of displaying the time difference to the fastest run
    /// </summary>
    public partial class GraphTimedifference : Form
    {
        readonly List<RunInformation> providedRuns;
        readonly StoredRunContext storedRunContext = StoredRunContext.GetInstance();
        readonly FormsPlot timedifferencePlot = new() { Dock = DockStyle.Fill };
        int amountOfLapsFastestRun; //fastest run includes that it is the run with most laps
        decimal averageLapTimeFastestRun; //compare all runs to this time

        decimal biggestTimeDifferenceValue = 0m; //will be used as boundary for yAxis tick generation
        decimal smallestTimeDifferenceValue = 0m; //will be used as boundary for yAxis tick generation

        /// <summary>
        /// Constructor which first calls the autogenerated VS code and then builds the graph
        /// </summary>
        /// <param name="providedRuns"></param>
        public GraphTimedifference(List<RunInformation> providedRuns)
        {
            //VS autogenerated code
            InitializeComponent();
            this.providedRuns = providedRuns;
            EntryBuildGraph();
        }

        private void EntryBuildGraph()
        {
            Controls.Add(timedifferencePlot);

            //Sort runs so we can easily get information from the fastest run
            providedRuns.Sort(new RunInformationComparerFastestRunFirst());

            amountOfLapsFastestRun = providedRuns[0].SectorList.Count / 3;
            averageLapTimeFastestRun = providedRuns[0].DrivenTime / (amountOfLapsFastestRun * 1000m);
            //Accessing [0] means accessing the fastest run (because is sorted now)
            //averageLapTimeFastestRun will serve as the x-axis and all other runs will compare to it

            //Create a new scatter plot for each run
            foreach (RunInformation providedRun in providedRuns)
            {
                //prepare a few arrays and data for the plot
                int[] lapTimesInMs = providedRun.GetLaptimes();
                decimal[] lapTimesInS = new decimal[lapTimesInMs.Length + 1]; //values for graph
                int[] lapNumbers = new int[lapTimesInMs.Length + 1]; //xvalues
                decimal[] timedifferences = new decimal[lapTimesInMs.Length + 1];
                decimal timeDifferenceToAverageFastestLap;

                //for each lap
                for (int i = 0; i < lapTimesInMs.Length; i++)
                {
                    //let all graphs start at (0|0)
                    if (i == 0)
                    {
                        timedifferences[0] = 0;
                        lapNumbers[0] = 0;
                    }

                    lapTimesInS[i + 1] = lapTimesInMs[i] / 1000m;
                    //Internal lap 0 will be lap 1 on the graph, also division by 1000 to get values in seconds

                    timeDifferenceToAverageFastestLap = lapTimesInS[i + 1] - averageLapTimeFastestRun;
                    //Get difference of lap X compared to average lap time of the fastest run

                    timedifferences[i + 1] = timedifferences[i] + timeDifferenceToAverageFastestLap;
                    //Add/substract previous diffirence to latest difference to get an accurate difference over time
                    //Fastest run will end at 0ms difference

                    if (timedifferences[i + 1] > biggestTimeDifferenceValue)
                    {
                        biggestTimeDifferenceValue = timedifferences[i + 1];
                    }

                    if (timedifferences[i + 1] < smallestTimeDifferenceValue)
                    {
                        smallestTimeDifferenceValue = timedifferences[i + 1];
                    }

                    lapNumbers[i + 1] = i + 1; //better display for humans for lap labels
                }

                Scatter scatterPlot = timedifferencePlot.Plot.Add.Scatter(lapNumbers, timedifferences);

                scatterPlot.LegendText = "Car: " + providedRun.CarName + "\r\n" + "Info: " + providedRun.RunDescription;
                //legend to tell the runs apart
            }

            SetupTickGenerators(timedifferencePlot);

            timedifferencePlot.Plot.Grid.MinorLineWidth = 1;
            timedifferencePlot.Plot.Grid.MinorLineColor = Colors.LightGray.WithAlpha(0.5);

            timedifferencePlot.Plot.Grid.MajorLineWidth = 2;
            timedifferencePlot.Plot.Grid.MajorLineColor = Colors.DarkGray.WithAlpha(0.5);
            timedifferencePlot.Plot.ShowLegend(Edge.Right);

        }

        /// <summary>
        /// This function sets up the ticks for the axes to be used in the graph
        /// </summary>
        /// <param name="timedifferencePlot"></param>
        private void SetupTickGenerators(FormsPlot timedifferencePlot)
        {
            ScottPlot.TickGenerators.NumericManual xTicks = new();
            for (int i = 0; i <= amountOfLapsFastestRun; i++)
            {
                xTicks.AddMajor(i, i.ToString());
            }
            timedifferencePlot.Plot.Axes.Bottom.TickGenerator = xTicks;
            //We want the x-axis ticks at only full laps

            //Create yAxis ticks for values >= 0
            ScottPlot.TickGenerators.NumericManual yTicks = new();
            for (decimal d = 0.0m; d < biggestTimeDifferenceValue + 1; d += 0.1m)
            {
                if (Decimal.IsInteger(d))
                {
                    yTicks.AddMajor((double)d, d.ToString() + "s");
                }
                else
                {
                    yTicks.AddMinor((double)d);
                }
            }
            //Create yAxis ticks for values < 0
            for (decimal d = -0.1m; d > smallestTimeDifferenceValue - 1; d -= 0.1m)
            {
                if (Decimal.IsInteger(d))
                {
                    yTicks.AddMajor((double)d, d.ToString() + "s");
                }
                else
                {
                    yTicks.AddMinor((double)d);
                }
            }
            timedifferencePlot.Plot.Axes.Left.TickGenerator = yTicks;
        }
    }
}
