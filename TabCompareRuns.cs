using acc_hotlab_private_run_compare.DBClasses;
using SQLitePCL;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace acc_hotlab_private_run_compare
{
    /// <summary>
    /// This class contains (non-autogenerated) functions for the tab CompareRuns
    /// </summary>
    /// <param name="storedRunContext"></param>
    public class TabCompareRuns(StoredRunContext storedRunContext)
    {
        readonly StoredRunContext StoredRunContext = storedRunContext;

        /// <summary>
        /// This function reads all distinct Tracknames in the stored database and fills in the found track names in the comboBoxTrackSelector
        /// 
        /// </summary>
        /// <param name="comboBoxTrackSelector">Accesses the comboBoxTrackSelector to fill in the names of the found tracks</param>
        public void PopulateTrackSelector(ComboBox comboBoxTrackSelector)
        {
            
            comboBoxTrackSelector.Items.Clear();

            //Retrieve all unique tracknames
            var trackNames = StoredRunContext.RunInformationSet
                .Select(r => r.TrackName)
                .Distinct()                
                .ToList();

            //Add tracknames to comboBoxTrackSelector
            foreach (var trackName in trackNames)
            {
                comboBoxTrackSelector.Items.Add(trackName);
            }
        }

        /// <summary>
        /// This funtion populates the car selector. It reads the selected trackname and searches for cars which have a record for that track. 
        /// It then populates the carSelector combobox. 
        /// </summary>
        /// <param name="comboBoxCarSelector">The comboBox which shall be populated (carSelector)</param>
        /// <param name="trackName">The trackname as a string</param>
        public void PopulateCarSelector(ComboBox comboBoxCarSelector, string trackName)
        {
            comboBoxCarSelector.Items.Clear();

            //Retrieve all unique car names for a chosen track
            var carNames = StoredRunContext.RunInformationSet
                .Where(s => s.TrackName == trackName)
                .Select(s => s.CarName)
                .Distinct()
                .ToList(); //turn it into a list

            //Add carnames to comboBoxCarSelector
            foreach (var carName in carNames)
            {
                comboBoxCarSelector.Items.Add(carName);
            }

        }

        /// <summary>
        /// This function populates the session time selector. It reads the selected trackname and carname, and searches for runs with distinct session lengths.
        /// </summary>
        /// <param name="comboBoxSessionSelector"></param>
        /// <param name="trackName"></param>
        /// <param name="carName"></param>
        public void PopulateSessionSelector(ComboBox comboBoxSessionSelector, string trackName, string carName)
        {
            comboBoxSessionSelector.Items.Clear();
            
            //Select all disctint session times depending on the supplied trackname and carname
            var sessionLengths = StoredRunContext.RunInformationSet
                .Where(r => r.TrackName == trackName && r.CarName == carName)
                .Select(r => r.SessionTime)
                .Distinct()
                .ToList();

            //Add all session lenghts to the comboBox
            foreach (int sessionLenght in sessionLengths)
            {
                comboBoxSessionSelector.Items.Add(sessionLenght.ToString());
            }
        }
        
        /// <summary>
        /// This function takes the information from the comboboxes and fills up the panel with information about different runs.
        /// It sorts runs depending on the comparer.
        /// </summary>
        /// <param name="panel">Panel where the runs shall be displayed</param>
        /// <param name="trackName">tracNname as a string</param>
        /// <param name="carName">carName as a string</param>
        /// <param name="displayRunsWithPenalties"></param>
        /// <param name="sessionLength"></param>
        /// <param name="comparerName"></param>
        public void FillUpPanelWithRuns(Panel panel, string trackName, string carName, bool displayRunsWithPenalties, int sessionLength, string comparerName)
        {
            //Compare with strings from FormStrings to choose the comparer.
            Comparer<RunInformation> comparer = comparerName switch
            {
                FormStrings.SortByTotalTimeShortestFirst => new RunInformationComparerFastestRunFirst(),
                FormStrings.SortByTotalTimeShortestLast => new RunInformationComparerFastestRunLast(),
                FormStrings.SortByFastestLapShortestLast => new RunInformationComparerFastestLapFirst(),
                FormStrings.SortByFastestLapShortestFirst => new RunInformationComparerFastestLapLast(),
                FormStrings.SortByDateOldestFirst => new RunInformationComparerOldestDateFirst(),
                FormStrings.SortByDateOldestLast => new RunInformationComparerOldestDateLast(),
                _ => new RunInformationComparerFastestRunFirst(),
            };

            //Select runs based on trackname, carname and session length
            var selectedRunsWithoutSectors = StoredRunContext.RunInformationSet
                .Where(r => r.TrackName == trackName && r.CarName == carName && r.SessionTime == sessionLength)
                .Select(r => r)
                .ToList();

            //Add sector information lists to runs to be able to compare runs with different amounts of laps
            foreach (var runWithoutSectors in  selectedRunsWithoutSectors)
            {
                var sectorList = StoredRunContext.SectorInformationSet
                    .Select(s => s)
                    .Where(s => s.RunID == runWithoutSectors.RunID)
                    .ToList<SectorInformation>();

                runWithoutSectors.SectorList = sectorList;
            }

            // Sort list
            selectedRunsWithoutSectors.Sort(comparer);

            int indexForDrawingOffset = 0;
            int amountPixelOffset = 40;

            // Add each run to the panel
            foreach (var run in selectedRunsWithoutSectors)
            {
                if (displayRunsWithPenalties || (!displayRunsWithPenalties && !run.PenaltyOccured))
                {
                    //Do not display runs if a penalty occured and the checkbox is set to not show runs with penalties

                    var amountOfSectors = StoredRunContext.SectorInformationSet
                        .Where(s => s.RunID == run.RunID)
                        .Count();

                    int amountOfLaps = amountOfSectors / 3;

                    // Create the label with the run information
                    Label runInformationLabel = new()
                    {
                        Text = ("Total time: " + TimeFormatter.FormatMilisecondsToHourString(run.DrivenTime) + " | Fastest lap: " + TimeFormatter.FormatMilisecondsToMinutesString(run.FastestLap) + 
                        " | Created at: " + run.RunCreatedDateTime.ToString() + " | No. of laps: " + amountOfLaps.ToString() + "\r\n" + 
                        "Info: "),
                        Location = new Point(0, 0 + indexForDrawingOffset * amountPixelOffset),
                        Size = new Size(1030, 40),
                        BorderStyle = BorderStyle.FixedSingle,
                        Name = run.RunID.ToString()
                    };

                    panel.Controls.Add(runInformationLabel);

                    indexForDrawingOffset++;
                }
            }

            return;
        }

        private Label[] TurnRunInformationIntoMultipleLabels(RunInformation runInformation)
        {
            List<Label> labels = new List<Label>();

            Label totalRunLengthLabel = new();
            totalRunLengthLabel.Text = "bla";

            //TODO Finish function
            return [.. labels];
        }


    }
}
