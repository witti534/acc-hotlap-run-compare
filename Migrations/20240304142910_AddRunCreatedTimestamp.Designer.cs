// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using acc_hotlab_private_run_compare.DBClasses;

#nullable disable

namespace acc_hotlab_private_run_compare.Migrations
{
    [DbContext(typeof(StoredRunContext))]
    [Migration("20240304142910_AddRunCreatedTimestamp")]
    partial class AddRunCreatedTimestamp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("acc_hotlab_private_run_compare.DBClasses.RunInformation", b =>
                {
                    b.Property<long>("RunID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DrivenTime")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FastestLap")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("PenaltyOccured")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RunCreatedDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RunID");

                    b.ToTable("RunInformationSet");
                });

            modelBuilder.Entity("acc_hotlab_private_run_compare.DBClasses.SectorInformation", b =>
                {
                    b.Property<long>("RunID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LapNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectorIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DrivenSectorTime")
                        .HasColumnType("INTEGER");

                    b.HasKey("RunID", "LapNumber", "SectorIndex");

                    b.ToTable("SectorInformationSet");
                });

            modelBuilder.Entity("acc_hotlab_private_run_compare.DBClasses.SectorInformation", b =>
                {
                    b.HasOne("acc_hotlab_private_run_compare.DBClasses.RunInformation", null)
                        .WithMany("SectorList")
                        .HasForeignKey("RunID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("acc_hotlab_private_run_compare.DBClasses.RunInformation", b =>
                {
                    b.Navigation("SectorList");
                });
#pragma warning restore 612, 618
        }
    }
}
